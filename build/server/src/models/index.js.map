{"version":3,"sources":["../../../../api/server/src/models/index.js"],"names":["fs","require","path","Sequelize","basename","__filename","env","process","NODE_ENV","config","__dirname","db","console","log","sequelize","use_env_variable","database","username","password","readdirSync","filter","file","indexOf","slice","forEach","model","join","DataTypes","name","Object","keys","modelName","associate","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMG,QAAQ,GAAGF,IAAI,CAACE,QAAL,CAAcC,UAAd,CAAjB;AACA,IAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;;AACA,IAAMC,MAAM,GAAGR,OAAO,CAACS,SAAS,GAAG,sBAAb,CAAP,CAA4CJ,GAA5C,CAAf;;AACA,IAAMK,EAAE,GAAG,EAAX;AAEAC,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CP,GAA5C;AACA,IAAIQ,SAAJ;;AACA,IAAIL,MAAM,CAACM,gBAAX,EAA6B;AAC3BD,EAAAA,SAAS,GAAG,IAAIX,SAAJ,CAAcI,OAAO,CAACD,GAAR,CAAYG,MAAM,CAACM,gBAAnB,CAAd,EAAoDN,MAApD,CAAZ;AACD,CAFD,MAEO;AACLK,EAAAA,SAAS,GAAG,IAAIX,SAAJ,CAAcM,MAAM,CAACO,QAArB,EAA+BP,MAAM,CAACQ,QAAtC,EAAgDR,MAAM,CAACS,QAAvD,EAAiET,MAAjE,CAAZ;AACD;;AAEDT,EAAE,CACCmB,WADH,CACeT,SADf,EAEGU,MAFH,CAEU,UAAAC,IAAI,EAAI;AACd,SAAQA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,IAAI,KAAKjB,QAAvC,IAAqDiB,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAA/E;AACD,CAJH,EAKGC,OALH,CAKW,UAAAH,IAAI,EAAI;AACf,MAAMI,KAAK,GAAGxB,OAAO,CAACC,IAAI,CAACwB,IAAL,CAAUhB,SAAV,EAAqBW,IAArB,CAAD,CAAP,CAAoCP,SAApC,EAA+CX,SAAS,CAACwB,SAAzD,CAAd;;AACAhB,EAAAA,EAAE,CAACc,KAAK,CAACG,IAAP,CAAF,GAAiBH,KAAjB;AACD,CARH;AAUAI,MAAM,CAACC,IAAP,CAAYnB,EAAZ,EAAgBa,OAAhB,CAAwB,UAAAO,SAAS,EAAI;AACnC,MAAIpB,EAAE,CAACoB,SAAD,CAAF,CAAcC,SAAlB,EAA6B;AAC3BrB,IAAAA,EAAE,CAACoB,SAAD,CAAF,CAAcC,SAAd,CAAwBrB,EAAxB;AACD;AACF,CAJD;AAMAA,EAAE,CAACG,SAAH,GAAeA,SAAf;AACAH,EAAE,CAACR,SAAH,GAAeA,SAAf;AAEA8B,MAAM,CAACC,OAAP,GAAiBvB,EAAjB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst Sequelize = require('sequelize');\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV || 'development';\nconst config = require(__dirname + '/../config/config.js')[env];\nconst db = {};\n\nconsole.log('this is the environment ==> ', env);\nlet sequelize;\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nfs\n  .readdirSync(__dirname)\n  .filter(file => {\n    return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');\n  })\n  .forEach(file => {\n    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nmodule.exports = db;\n\n// import fs from 'fs';\n// import path from 'path';\n// import Sequelize from 'sequelize';\n// import configJson from '../config/config';\n\n// const basename = path.basename(__filename);\n// const env = process.env.NODE_ENV ? process.env.NODE_ENV : 'development';\n\n// const config = configJson[env];\n\n// console.log('this is the environment: ', env);\n\n// const db = {};\n\n// let sequelize;\n// if (config.environment === 'production') {\n//   sequelize = new Sequelize(\n//       process.env[config.use_env_variable], config\n//     );\n//   sequelize = new Sequelize(\n//     process.env.DB_NAME,\n//     process.env.DB_USER,\n//     process.env.DB_PASS, {\n//       host: process.env.DB_HOST,\n//       port: process.env.DB_PORT,\n//       dialect: 'postgres',\n//       dialectOption: {\n//         ssl: true,\n//         native: true\n//       },\n//       logging: true\n//     }\n//   );\n// } else {\n//   sequelize = new Sequelize(\n//      config.database, config.username, config.password, config\n//   );\n// }\n\n// fs\n//   .readdirSync(__dirname)\n//   .filter((file) => {\n//     return (file.indexOf('.') !== 0) && \n//            (file !== basename) && (file.slice(-3) === '.js');\n//   })\n//   .forEach((file) => {\n//     const model = sequelize.import(path.join(__dirname, file));\n//     db[model.name] = model;\n//   });\n\n// Object.keys(db).forEach((modelName) => {\n//   if (db[modelName].associate) {\n//     db[modelName].associate(db);\n//   }\n// });\n\n// db.sequelize = sequelize;\n// db.Sequelize = Sequelize;\n\n// export default db;"],"file":"index.js"}